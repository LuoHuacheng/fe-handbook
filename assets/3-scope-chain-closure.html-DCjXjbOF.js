import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as l,e as o}from"./app--uKMlBPf.js";const i={},a=o('<h1 id="作用域-作用域链-闭包" tabindex="-1"><a class="header-anchor" href="#作用域-作用域链-闭包"><span>作用域/作用域链/闭包</span></a></h1><h2 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域"><span>作用域</span></a></h2><blockquote><p>指一个变量或函数的作用范围</p></blockquote><ul><li>函数内声明的所有变量在函数体内始终可见</li><li>变量提升（var 声明的变量会提升到作用域顶层并赋值 undefined, let 与 const 则不会提升）</li><li>ES6之前有全局与局部作用域，没有块级作用域（catch作用域只在其内部生效）</li><li>局部作用域（变量）的优先级高于全局作用域（变量）</li></ul><h2 id="作用域链" tabindex="-1"><a class="header-anchor" href="#作用域链"><span>作用域链</span></a></h2><blockquote><p>当访问一个变量时，解析器会首先在当前作用域内查找标识符，如果没有找到，就去父级作用域查找，直到找到该变量的标识符或者不在父级作用域内</p></blockquote><ul><li>查找一个普通对象的属性，若在作用域链内找不到则会拋出 ReferenceError 错误</li><li>顶端是全局对象，在全局环境中定义的变量会绑定到全局对象中</li><li>和原型链查找的区别：在当前对象和原型链中都找不到普通对象的属性时，会返回 undefined</li></ul><h3 id="执行" tabindex="-1"><a class="header-anchor" href="#执行"><span>执行</span></a></h3><ul><li><p>无嵌套的函数（全局环境下直接调用的函数）</p><ul><li>定义时，函数标识符（identifier）就被加入到全局对象中，此标识符引用的是一个函数对象（function object），并且这个函数对象不仅包括函数自身的代码，还含有指向其被创建时的作用域对象</li><li>内部属性[[scope]]指向当前的作用域对象，即函数标识符被创建时能够直接访问的作用域对象（全局对象）</li><li>调用时，一个新的作用域对象会被创建，该对象中包含函数定义的局部变量，以及其参数（arguments），新作用域对象的父作用域对象就是在运行函数时可以直接访问的那个作用域对象</li></ul></li><li><p>有嵌套的函数（在函数内部调用的函数）</p><ul><li>当函数返回没有被引用的时候，会被垃圾回收，但对于闭包（函数嵌套）来说，即使外部函数返回了，函数对象仍旧会引用它被创建时的作用域对象，所以不会被垃圾回收</li><li>当调用一个子函数，其执行上下文会维护一个作用域链，指向父函数的作用域，作用域链是一个此类结构的数组：Scope: [AO, parentFnContext.AO, globalContext.VO]\\n所以即使父函数执行完后其 parentFnContext 被销毁了，Javascript 依旧会将其 AO （活动对象）保留在内存中，子函数仍然可以通过作用域链访问到其所需要的父函数的变量</li></ul></li></ul><h2 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包"><span>闭包</span></a></h2><blockquote><p>闭包是指有权访问另一个函数作用域中的变量的函数</p></blockquote><ul><li>闭包可以访问当前函数以外的变量</li><li>即使外部函数已经返回，闭包仍旧可以访问外部函数定义的变量</li><li>闭包可以更新外部变量的值</li></ul>',12),n=[a];function c(r,s){return t(),l("div",null,n)}const d=e(i,[["render",c],["__file","3-scope-chain-closure.html.vue"]]),u=JSON.parse('{"path":"/js-book/3-scope-chain-closure.html","title":"作用域/作用域链/闭包","lang":"zh-CN","frontmatter":{"category":"JS","description":"作用域/作用域链/闭包 作用域 指一个变量或函数的作用范围 函数内声明的所有变量在函数体内始终可见 变量提升（var 声明的变量会提升到作用域顶层并赋值 undefined, let 与 const 则不会提升） ES6之前有全局与局部作用域，没有块级作用域（catch作用域只在其内部生效） 局部作用域（变量）的优先级高于全局作用域（变量） 作用域链 ...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/my-docs/js-book/3-scope-chain-closure.html"}],["meta",{"property":"og:site_name","content":"HC的前端手册"}],["meta",{"property":"og:title","content":"作用域/作用域链/闭包"}],["meta",{"property":"og:description","content":"作用域/作用域链/闭包 作用域 指一个变量或函数的作用范围 函数内声明的所有变量在函数体内始终可见 变量提升（var 声明的变量会提升到作用域顶层并赋值 undefined, let 与 const 则不会提升） ES6之前有全局与局部作用域，没有块级作用域（catch作用域只在其内部生效） 局部作用域（变量）的优先级高于全局作用域（变量） 作用域链 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-18T10:45:41.000Z"}],["meta",{"property":"article:author","content":"Mr.HC"}],["meta",{"property":"article:modified_time","content":"2024-02-18T10:45:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"作用域/作用域链/闭包\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-18T10:45:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.HC\\"}]}"]]},"headers":[{"level":2,"title":"作用域","slug":"作用域","link":"#作用域","children":[]},{"level":2,"title":"作用域链","slug":"作用域链","link":"#作用域链","children":[{"level":3,"title":"执行","slug":"执行","link":"#执行","children":[]}]},{"level":2,"title":"闭包","slug":"闭包","link":"#闭包","children":[]}],"git":{"createdTime":1708253141000,"updatedTime":1708253141000,"contributors":[{"name":"LuoHuacheng","email":"154224099@qq.com","commits":1}]},"readingTime":{"minutes":2.54,"words":763},"filePathRelative":"js-book/3-scope-chain-closure.md","localizedDate":"2024年2月18日","autoDesc":true}');export{d as comp,u as data};
