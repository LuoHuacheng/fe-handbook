import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-CgZv1aOY.js";const e={},p=t(`<h1 id="前后端通信" tabindex="-1"><a class="header-anchor" href="#前后端通信"><span>前后端通信</span></a></h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>前后端通信方法有哪些？同源与跨域？</p></div><h2 id="同源策略及限制" tabindex="-1"><a class="header-anchor" href="#同源策略及限制"><span>同源策略及限制</span></a></h2><p>同源是指域名、端口与协议全都相同。</p><p>非同源通信会存在以下限制：</p><ol><li>Cookie、LocalStorage、IndexDB 无法获取</li><li>DOM 无法获取与操作</li><li>Ajax 不能发送，只适用于同源通信</li></ol><h2 id="前后端通信方法" tabindex="-1"><a class="header-anchor" href="#前后端通信方法"><span>前后端通信方法</span></a></h2><h3 id="ajax" tabindex="-1"><a class="header-anchor" href="#ajax"><span>Ajax</span></a></h3><p>Asynchronous JavaScript and XML 同源通信</p><ol><li>创建 XMLHTTPRequest 对象 <code>xhr = new XMLHttpRequest()</code><br> 兼容 IE：<code>new window.ActiveXObject(&#39;Microsoft.XMLHTTP&#39;)</code></li><li>使用 <code>open</code> 方法设置请求的参数：<code>xhr.open(method, url, 是否异步)</code><br><code>GET</code> 与 <code>POST</code> 传输数据格式以及请求头设置<br><code>xhr.setRequestHeader(&#39;Content-Type&#39;: &#39;application/x-www-form=urlencoded&#39;)</code></li><li>发送请求 xhr.send()</li><li>注册事件 xhr.onreadystatechange 事件监听请求的状态 <code>xhr.readyState</code> 和 <code>xhr.status</code></li><li>获取返回的数据并操作</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> url <span class="token operator">=</span> options<span class="token punctuation">.</span>url<span class="token punctuation">;</span>
  <span class="token keyword">const</span> method <span class="token operator">=</span> options<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> async <span class="token operator">=</span> options<span class="token punctuation">.</span>async <span class="token operator">!=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// default is true</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> options<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token keyword">let</span> xhr<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">//如果是IE5或者IE6浏览器，则使用ActiveX对象</span>
    xhr <span class="token operator">=</span> <span class="token function">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">&#39;Microsoft.XMLHTTP&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> paramArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> encodeData<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 参数拼接需要通过 encodeURIComponent 进行编码</span>
      paramArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
        <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;=&#39;</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    encodeData <span class="token operator">=</span> paramArr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 检测 url 中是否已存在 ? 及其位置</span>
    <span class="token keyword">const</span> index <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> url <span class="token operator">+=</span> <span class="token string">&#39;?&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!==</span> url<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> url <span class="token operator">+=</span> <span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">;</span>
    <span class="token comment">// 拼接 url</span>
    url <span class="token operator">+=</span> encodeData<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> async<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// post 方式需要设置请求头</span>
    xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span>
      <span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;application/x-www-form-urlencoded;charset=UTF-8&#39;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>encodeData<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  xhr<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">ajax</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;api&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">async</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">callback</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket"><span>WebSocket</span></a></h3><p>不受同源策略限制</p><p>特点:</p><ul><li>基于 TCP 协议，服务端易实现</li><li>与 HTTP 协议兼容性好，默认端口为 80 和 443，握手阶段采用 HTTP 协议</li><li>数据格式轻量、性能开销小、通信高效</li><li>可发送文本，也可发送二进制数据</li><li>无同源限制，客户端可以与任意服务器通信</li><li>协议标识为 <code>ws</code> 或 <code>wss</code></li><li>服务器可主动向客户端发送数据</li></ul><p>客户端实现：</p><ol><li>创建 WebSocket 对象：<code>ws = new WebSocket(url)</code></li><li>打开连接：<code>ws.open = fn(e){}</code></li><li>接收信息：<code>ws.onmessage = fn(e){}</code></li><li>关闭连接：<code>ws.onclose = fn(e){}</code></li><li>错误捕获：<code>ws.onerror = fn(e){}</code></li></ol><h3 id="cors" tabindex="-1"><a class="header-anchor" href="#cors"><span>CORS</span></a></h3><p>Corss-Origin Resource Sharing 支持跨域与同源</p><p>简单请求：</p><ul><li>GET、HEAD、POST</li><li>Accept、Accept-Language、Content-Language</li><li>Content-Type：application/x-www-form-urlencoded、multipart/form-data、text\\plain</li></ul><p>非简单请求：</p><ul><li>OPTIONS 方法发起预请求以获知服务器是否允许该实际请求</li><li>预检请求对 JS 是透明的，JS 无法获取预检请求的任何信息</li><li>预检请求不是每次都发生，可以在服务端设置 Access-Control-Max-Age 来控制预检请求的有效期，有效期内不再发送</li></ul><p>携带身份凭证(token)的请求:</p><ul><li>CORS 默认不带身份凭证，需要前端设置 withCredentials=true 来使请求发送凭据</li><li>附带凭证后 <ol><li>服务端 <code>Access-Control-Allow-Origin</code> 不能设置为 *</li><li>服务端 <code>Access-Control-Allow-Credentials</code> 需要设置为 true</li></ol></li></ul><h2 id="跨域通信" tabindex="-1"><a class="header-anchor" href="#跨域通信"><span>跨域通信</span></a></h2><ul><li><p>JSONP(JSON Padding)</p><ul><li>利用 <code>script</code> 标签跨域，由服务端返回预先设定好的全局函数的调用，并将服务端数据以参数传递</li><li>只能用于 GET 请求，且在接收数据处理完后要删除这个全局变量</li></ul><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>
  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/api?jsoncallback=callbackFunction<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">function</span> <span class="token function">callbackFunction</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Hash</p><ul><li>利用 Hash 改变后页面不会刷新的特点跨域</li><li>A 页面将要改善的数据转换为 JSON 字符串发给 B 页面，<code>B.src = B.src + &#39;#&#39; + &#39;jsonString&#39;;</code></li><li>B 页面监听 hash 变化取得数据，<code>var data = window.location.hash;</code></li><li>数据长度有限制，由浏览器地址栏长度限制</li></ul></li><li><p>WebSocket</p></li><li><p>CORS</p></li></ul>`,27),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","7-comm.html.vue"]]),d=JSON.parse('{"path":"/interview/outline/7-comm.html","title":"前后端通信","lang":"zh-CN","frontmatter":{"category":"Javascript","description":"前后端通信 提示 前后端通信方法有哪些？同源与跨域？ 同源策略及限制 同源是指域名、端口与协议全都相同。 非同源通信会存在以下限制： Cookie、LocalStorage、IndexDB 无法获取 DOM 无法获取与操作 Ajax 不能发送，只适用于同源通信 前后端通信方法 Ajax Asynchronous JavaScript and XML 同...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/fe-handbook/interview/outline/7-comm.html"}],["meta",{"property":"og:site_name","content":"HC的前端手册"}],["meta",{"property":"og:title","content":"前后端通信"}],["meta",{"property":"og:description","content":"前后端通信 提示 前后端通信方法有哪些？同源与跨域？ 同源策略及限制 同源是指域名、端口与协议全都相同。 非同源通信会存在以下限制： Cookie、LocalStorage、IndexDB 无法获取 DOM 无法获取与操作 Ajax 不能发送，只适用于同源通信 前后端通信方法 Ajax Asynchronous JavaScript and XML 同..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-18T10:45:41.000Z"}],["meta",{"property":"article:author","content":"Mr.HC"}],["meta",{"property":"article:modified_time","content":"2024-02-18T10:45:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"前后端通信\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-18T10:45:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.HC\\"}]}"]]},"headers":[{"level":2,"title":"同源策略及限制","slug":"同源策略及限制","link":"#同源策略及限制","children":[]},{"level":2,"title":"前后端通信方法","slug":"前后端通信方法","link":"#前后端通信方法","children":[{"level":3,"title":"Ajax","slug":"ajax","link":"#ajax","children":[]},{"level":3,"title":"WebSocket","slug":"websocket","link":"#websocket","children":[]},{"level":3,"title":"CORS","slug":"cors","link":"#cors","children":[]}]},{"level":2,"title":"跨域通信","slug":"跨域通信","link":"#跨域通信","children":[]}],"git":{"createdTime":1708253141000,"updatedTime":1708253141000,"contributors":[{"name":"LuoHuacheng","email":"154224099@qq.com","commits":1}]},"readingTime":{"minutes":3.01,"words":904},"filePathRelative":"interview/outline/7-comm.md","localizedDate":"2024年2月18日","autoDesc":true}');export{k as comp,d as data};
