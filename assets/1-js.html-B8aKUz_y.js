import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app--uKMlBPf.js";const p={},e=t(`<h1 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript"><span>Javascript</span></a></h1><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 原始类型</span>
<span class="token keyword">undefined</span><span class="token punctuation">,</span> boolean<span class="token punctuation">,</span> number<span class="token punctuation">,</span> string<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> symbol<span class="token punctuation">,</span> bigint<span class="token punctuation">;</span>
<span class="token comment">// 引用类型</span>
object<span class="token punctuation">;</span> <span class="token comment">// 包括：function, array, date, regexp, error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es6-有哪些新属性" tabindex="-1"><a class="header-anchor" href="#es6-有哪些新属性"><span>ES6 有哪些新属性</span></a></h2><ul><li>let 和 const</li><li>Promise</li><li>for...of</li><li>展开语法和对象数组解构</li><li>箭头函数</li><li>函数传默认参数</li><li>Map，Set，WeakMap，WeakSet</li><li>类</li><li>模板字符串</li><li>Proxy</li></ul><h2 id="let、var、const-的区别" tabindex="-1"><a class="header-anchor" href="#let、var、const-的区别"><span>let、var、const 的区别</span></a></h2><ul><li>let 不能重复定义变量，而 var 可以</li><li>var 存在变量提升，可在声明前使用变量，而 let 由于存在暂时性死区不能在声明变量前使用</li><li>var 声明的变量会挂载到 window 下面，而 let 不会挂到 window 下面，而是形成一个块级作用域</li><li>const 定义的是常量，定义之后就不可更改，而且初始化的时候必须赋值，其他和 let 一样</li></ul><h2 id="map-与-object-的区别" tabindex="-1"><a class="header-anchor" href="#map-与-object-的区别"><span>Map 与 Object 的区别</span></a></h2><ol><li>键的类型——Map 的键可以是任何类型，而 Object 的键只能是 String 或 Symbol(虽然可以看起来是其他类型，但实际上会被转化为字符串)</li><li>大小属性——Map 的键值对个数可以通过 size 属性获取，而 Object 的键值对个数只能手动计算</li><li>顺序——Map 的键值对是有序的，而 Object 的键值对是无序的</li><li>遍历——Map 的键值对可以被 for...of 循环遍历，而 Object 的键值对只能被 for...in 循环遍历</li><li>内置方法——Map 内置了一些方法如(<code>get</code>, <code>set</code>, <code>has</code>, <code>delete</code>)，而 Object 没有</li><li>性能——Map 的增删操作性能比 Object 好，而 Object 查找操作的性能会更好(Object 更适用于作为记录（record）或者字典（dictionary）)</li><li>兼容性——Map 在 IE11 及以下不支持，而 Object 在 IE8 及以下不支持</li></ol><h2 id="map-和-set-的区别" tabindex="-1"><a class="header-anchor" href="#map-和-set-的区别"><span>Map 和 Set 的区别</span></a></h2><ul><li>Map: 存储键-值对。键可以是任何类型（包括对象、函数等）</li><li>Set: 存储唯一值，不允许重复。值可以是任何类型</li></ul><h2 id="map-和-weakmap-weakmap-和-weakset" tabindex="-1"><a class="header-anchor" href="#map-和-weakmap-weakmap-和-weakset"><span>Map 和 WeakMap，WeakMap 和 WeakSet</span></a></h2><ul><li>Map <ul><li>存储键-值对，键必须是对象</li><li>键可以是任何类型</li><li>键和值都可以被枚举</li><li>强引用键，即使你删除了对键的引用，它也不会被垃圾回收</li></ul></li><li>WeakMap <ul><li>存储键-值对，键必须是对象</li><li>键只能是对象</li><li>键和值都不可枚举</li><li>弱引用键，即使你删除了对键的引用，它就会被垃圾回收</li></ul></li><li>WeakSet <ul><li>存储唯一对象值</li></ul></li></ul><h2 id="weakmap-的应用场景" tabindex="-1"><a class="header-anchor" href="#weakmap-的应用场景"><span>WeakMap 的应用场景</span></a></h2><ul><li>缓存和记忆化：WeakMap 可用于缓存已经计算过的结果，以便将来快速检索。由于它是弱引用的，所以当对象不再需要时，它们可以被垃圾收集</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">expensiveOperation</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// perform expensive calculation（执行昂贵的计算）</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>关联额外数据：当你想给一个对象（比如网页上的一个按钮或图像）添加一些额外信息，但又不想直接改变这个对象，那么可以用 WeakMap。这样做的好处是，当这个对象不再需要时，它和你添加的额外信息都会自动被清除，不会占用多余的内存</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> domData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 在某个 DOM 元素上设置数据</span>
domData<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;myDiv&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">clicks</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 在事件监听器中更新或读取数据</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> domData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> data<span class="token punctuation">.</span>clicks<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es6-中的-proxy" tabindex="-1"><a class="header-anchor" href="#es6-中的-proxy"><span>ES6 中的 Proxy</span></a></h2><ul><li>定义：Proxy 对象用于创建一个对象的代理，从而实现基本的拦截和自定义（属性查找，赋值，枚举，函数调用等）</li><li>语法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>参数： <ul><li>target：要使用 Proxy 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）</li><li>handler：一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 p 的行为</li></ul></li><li>作用：用于拦截和自定义对象的一些操作</li><li>特点：Proxy 对象的所有用法，都是上面这种形式，不同的只是 handler 参数的写法。其中，new Proxy()表示创建一个 Proxy 实例，target 参数表示所要拦截的目标对象，handler 参数也是一个对象，用来定制拦截行为。</li><li>应用场景 <ul><li>拦截和监视外部对对象的访问</li><li>降低函数或类的复杂度</li><li>在复杂操作前对操作进行校验或对所需资源进行管理</li></ul></li></ul><h2 id="浏览器事件循环-event-loop" tabindex="-1"><a class="header-anchor" href="#浏览器事件循环-event-loop"><span>⭐ 浏览器事件循环(Event Loop)</span></a></h2><ul><li><p>起源</p><p>因为 JS 是单线程执行的，所以它一次只能执行一个任务，如果这个任务时间过长就会造成阻塞，因此需要一个异步执行代码的机制，从而产生了事件循环</p></li><li><p>过程</p><p>主线程首先从上到下将 JS 代码放到执行栈中执行，当执行到异步代码的时候，会将这部分要执行的代码放到异步的任务队列里面，如果是宏任务，就会放到宏任务队列里，如果是微任务，就会放到微任务队列里。当同步代码执行完成后，这时候执行栈为空，JS 引擎会先查看当前微任务队列里面有没有要执行的任务，如果有的话一个一个的拿出来放到执行栈中执行，执行完看当前宏任务队列里面有没有要执行的任务，有的话也一个一个的拿出来放到执行栈中执行，执行完开始执行下一个宏任务代码。这个过程是循环的，因此称为“事件循环”</p></li><li><p>宏任务</p><ul><li>整个 script 标签里的代码块</li><li>setTimeout / setInterval / setImmediate</li><li>I/O 操作</li><li>UI 渲染</li></ul></li><li><p>微任务</p><ul><li>Promise.then / catch / finally</li><li>MutaionObserver</li><li>Object.observe</li></ul></li></ul><h2 id="深浅拷贝" tabindex="-1"><a class="header-anchor" href="#深浅拷贝"><span>⭐ 深浅拷贝</span></a></h2><ul><li>深浅拷贝是针对引用类型说的，原始类型不存在深浅拷贝</li><li>浅拷贝是复制的是对象的引用，而深拷贝是拷贝了一个完全一模一样的对象</li><li>浅拷贝的方式 <ol><li>Object.assign()</li><li>展开运算符</li><li>循环遍历</li></ol></li><li>深拷贝的方式 <ol><li><code>JSON.parse(JSON.stringify(obj))</code></li><li>递归</li><li>一些工具库如 lodash 中的 cloneDeep() 方法<div class="hint-container tip"><p class="hint-container-title">提示</p><p>JSON.stringify()的缺陷，处理不了 function 对象、undefined 以及 symbol 类型，原因是 JSON.stringify()在处理这些类型，这些类型会被忽略，不会被处理。并且 JSON.stringify()也解决不了循环引用的问题</p></div></li></ol></li><li>深拷贝怎么解决循环引用 <ul><li>解决循环引用问题，你通常需要维护一个“已访问”的对象列表。当你试图拷贝一个对象时，你首先检查这个对象是否已经被拷贝过了。如果是，你直接返回之前拷贝过的新对象的引用，不需要重新拷贝它</li></ul></li><li>实现一个深拷贝函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">quote</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>quote <span class="token operator">=</span> obj<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 基础类型或 null，直接返回</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
  <span class="token comment">// 检查是否循环引用</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> visited<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 对于数组或对象，创建一个新的空数组或对象</span>
  <span class="token keyword">const</span> copyObj <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 将当前正在拷贝的对象加入已访问列表</span>
  visited<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> copyObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 递归拷贝所有属性</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      copyObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> copyObj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">deepCopy</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="防抖和节流" tabindex="-1"><a class="header-anchor" href="#防抖和节流"><span>⭐ 防抖和节流</span></a></h2><h3 id="防抖" tabindex="-1"><a class="header-anchor" href="#防抖"><span>防抖</span></a></h3><ul><li><p>在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。</p></li><li><p>应用场景</p><ul><li>输入框验证：输入框中内容发生变化时，用防抖来减少请求或判断次数。</li><li>窗口调整（resize）：窗口调整时会触发事件的回调函数，用防抖来让其只触发一次。</li></ul></li><li><p>实现方式</p><ul><li>定义一个变量来保存定时器</li><li>触发事件时，清除之前的定时器，并设置新的定时器</li><li>定时器结束后，执行事件回调函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="节流" tabindex="-1"><a class="header-anchor" href="#节流"><span>节流</span></a></h3><ul><li><p>规定在一个单位时间内，只能触发一次事件，如果这个单位时间内触发多次事件，只有一次生效。</p></li><li><p>应用场景</p><ul><li>按钮提交：用户提交表单时，用来防止多次提交按钮操作。</li><li>监听滚动事件，在用户滚动时定期检查页面的位置，而不是每次滚动都检查</li><li>窗口调整大小。间隔一段时间更新一次，让你在调整的过程中能看到布局的变化</li></ul></li><li><p>实现方式</p><ul><li>定义一个变量来保存定时器</li><li>触发事件时，判断是否有定时器在执行，如果有则不执行</li><li>定时器结束后，执行事件回调函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> lastCall <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> lastCall <span class="token operator">&gt;=</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      lastCall <span class="token operator">=</span> now<span class="token punctuation">;</span>
      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="原型和原型链" tabindex="-1"><a class="header-anchor" href="#原型和原型链"><span>⭐ 原型和原型链</span></a></h2><ul><li>原型的定义：每一个除了 null 之外的 JS 对象在创建的时候都会与之关联另一个对象，这个对象就是它的原型。并且可以从这个对象继承属性和方法</li><li>原型链定义：当你试图访问一个对象的属性时，JS 会首先在对象本身查找，如果没有找到，则会继续在该对象的原型上查找，然后就是原型的原型，以此类推。这样构成的一条链路我们称之为原型链</li><li>对象原型：JS 中所有对象的原型最终都会指向 <code>Object.prototype</code>，而 <code>Object.prototype</code> 的原型等于 <code>null</code></li><li>函数原型：当函数作为对象时，它的原型是 <code>__proto__</code>，最终指向都是 <code>Function.prototype</code>。当函数作为构造函数时，它的原型是 <code>prototype</code></li></ul><h2 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包"><span>⭐ 闭包</span></a></h2><ul><li><p>定义：函数和与其相关的引用环境的组合就是闭包</p></li><li><p>创建：当一个内部函数在一个外部函数里被定义，并且内部函数引用了外部函数的变量或参数，就会创建闭包</p></li><li><p>缺点：</p><ol><li>闭包使用不当会导致内存泄漏</li><li>过度使用闭包会导致代码难以理解和维护</li></ol></li><li><p>作用：</p><ul><li>数据封装和私有变量：闭包可以用来模拟私有变量，提供公开的 API 而隐藏内部实现细节</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 私有变量</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">increment</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      count<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">decrement</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      count<span class="token operator">--</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">getCount</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">createCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个新的计数器</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 0，通过 API 获取 count 的值</span>
counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过 API 增加 count</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 1</span>
counter<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过 API 减少 count</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 0</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 undefined，因为 count 是私有变量，无法直接访问</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>动态生成函数：根据不同的参数或条件生成具有特定行为的函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token parameter">language</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>language <span class="token operator">===</span> <span class="token string">&#39;English&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>language <span class="token operator">===</span> <span class="token string">&#39;Spanish&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hola, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>language <span class="token operator">===</span> <span class="token string">&#39;Chinese&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">你好, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">！</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hi, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> greetInEnglish <span class="token operator">=</span> <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token string">&#39;English&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> greetInSpanish <span class="token operator">=</span> <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token string">&#39;Spanish&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> greetInChinese <span class="token operator">=</span> <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token string">&#39;Chinese&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">greetInEnglish</span><span class="token punctuation">(</span><span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;Hello, John!&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">greetInSpanish</span><span class="token punctuation">(</span><span class="token string">&#39;Juan&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;Hola, Juan!&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">greetInChinese</span><span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;你好, 张三！&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="for-in-和-for-of-的区别" tabindex="-1"><a class="header-anchor" href="#for-in-和-for-of-的区别"><span>for in 和 for of 的区别</span></a></h2><ul><li>for in 遍历的是 key，for of 遍历的是 value</li><li>for in 可以遍历普通对象，而 for of 只能遍历可迭代类型对象</li><li>for in 遍历对象的时候会遍历对象原型链上面的属性</li><li>for in 一般被用来遍历对象，for of 一般被用来遍历数组</li><li>for in 迭代对象的顺序是不确定的<div class="hint-container tip"><p class="hint-container-title">提示</p><p>hasOwnProperty()方法可以判断属性是否是属于对象本身，属于的话为 true，不属于为 false</p></div></li></ul><h2 id="箭头函数和普通函数的区别" tabindex="-1"><a class="header-anchor" href="#箭头函数和普通函数的区别"><span>⭐ 箭头函数和普通函数的区别</span></a></h2><ul><li>箭头函数没有自己的 this，this 来自于执行上下文</li><li>箭头函数不能用作构造函数，所以它也没有 prototype</li><li>箭头函数没有 arguments，不能使用 arguments 取函数的参数</li></ul><h2 id="new-的执行过程及实现" tabindex="-1"><a class="header-anchor" href="#new-的执行过程及实现"><span>⭐ new 的执行过程及实现</span></a></h2><ul><li>创建一个空对象</li><li>这个空对象内部的<code>__proto__</code>属性指向构造函数的<code>prototype</code>属性</li><li>将新创建的对象作为 this 的上下文</li><li>如果函数没有返回其他对象，则返回新创建的对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> fn<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es6-中的-promise" tabindex="-1"><a class="header-anchor" href="#es6-中的-promise"><span>⭐ ES6 中的 Promise</span></a></h2><ul><li><p>定义：Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大</p></li><li><p>特点：Promise 对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败）</p></li><li><p>缺点</p><ol><li>无法取消 Promise，一旦新建它就会立即执行，无法中途取消</li><li>如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部</li><li>当处于 pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）</li></ol></li><li><p>实例方法</p><ol><li>then：用于指定 Promise 成功或失败时的回调函数</li><li>catch：用于指定 Promise 失败时的回调函数</li><li>finally：用于指定 Promise 是否成功或失败都会执行的回调函数</li></ol></li><li><p>静态方法</p><ol><li>Promise.resolve：创建一个立即成功的 Promise 对象，其结果就是你给它的值</li><li>Promise.reject：创建一个立即失败的 Promise 对象，其拒绝原因就是你指定的值</li><li>Promise.all：接收一个 Promise 对象数组，等对象数组中的 Promise 全部都成功解决后，返回一个包含所有成功结果的数组，按照输入的顺序排列</li><li>Promise.race：接收一个 Promise 对象数组，立即返回第一个解决的结果，不论结果是成功还是失败</li><li>Promise.allSettled: 接收一个 Promise 对象数组，等对象数组中的 Promise 全部都解决后，不论结果是成功还是失败都会全部返回，返回一个包含所有结果的数组，按照输入的顺序排列</li><li>Promise.any: 接收一个 Promise 对象数组，立即返回第一个成功解决的结果。如果全部失败，返回一个被拒绝的带有拒绝原因的数组</li></ol></li><li><p>实现 Promise.all</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">promiseAll</span><span class="token punctuation">(</span><span class="token parameter">promiseArr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      len <span class="token operator">=</span> promiseArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>promiseArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>
          count<span class="token operator">++</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> len<span class="token punctuation">)</span> <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>实现 Promise.race</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">promiseRace</span><span class="token punctuation">(</span><span class="token parameter">promiseArr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resovle<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> len <span class="token operator">=</span> promiseArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> promiseItem <span class="token keyword">of</span> promiseArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>promiseItem<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resovle<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>实现 Promise.any</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">promiseAny</span><span class="token punctuation">(</span><span class="token parameter">promiseArr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> errors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      len <span class="token operator">=</span> promiseArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>promiseArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          errors<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> err<span class="token punctuation">;</span>
          count<span class="token operator">++</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AggregateError</span><span class="token punctuation">(</span>errors<span class="token punctuation">,</span> <span class="token string">&#39;所有的Promise都被拒绝&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="async-await" tabindex="-1"><a class="header-anchor" href="#async-await"><span>⭐ async/await</span></a></h2><ul><li>定义：async/await 是 JS 中处理异步操作的一种语法，是基于 Promise 的一种更简洁、更易读的方式。这种语法让异步代码看起来和写起来更像同步代码，从而减少了代码的复杂性</li><li>原理：async/await 实际上是使用了 Promise 和 Generator 的语法糖，它通过将 Generator 函数和 Promise 对象结合起来，实现了异步操作的同步化表达。</li><li>使用：async/await 通常与 async 函数一起使用，async 函数用于定义一个异步操作，而 await 关键字用于暂停异步操作的执行，等待 Promise 对象的状态发生变化后再继续执行。</li><li>优点：async/await 语法使得异步操作更加简洁和易读，并且可以更好地处理错误处理和流程控制，同时减少了回调函数。</li><li>缺点：async/await 语法在某些情况下可能会导致性能问题，因为它会阻塞代码的执行，直到异步操作完成。因此，在性能要求较高的场景下，应该尽量避免使用 async/await。</li></ul><h2 id="函数柯里化" tabindex="-1"><a class="header-anchor" href="#函数柯里化"><span>⭐ 函数柯里化</span></a></h2><ul><li><p>定义：函数柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。</p></li><li><p>原理：函数柯里化通过创建一个函数，该函数接收一部分参数，返回一个新的函数，新函数接收余下的参数，然后执行原函数。</p></li><li><p>优点：函数柯里化可以提高代码的可读性和复用性，减少重复代码，提高代码的灵活性和可扩展性。</p></li><li><p>缺点：函数柯里化可能会增加代码的复杂性，降低代码的可维护性。</p></li><li><p>场景</p><ol><li>参数复用：在你需要多次调用同一个函数，但每次调用时某些参数保持不变的情况下，通过柯里化，你可以创建预设了一些参数的新函数，这些新函数更专注于特定的任务，更易于维护和重用。</li><li>延迟执行：当你在不能立马获得所有参数的时候，柯里化可以让你在不同的时间点接收不同的参数，从而提高灵活性和复用性。例如你做个计算，100+200+X，你不知道第 3 个参数的情况下，你可以先将前 2 个参数传给函数，等第 3 个参数有了，才执行返回。</li><li>提前返回：在某些情况下，你可能会提前返回一个函数的结果，使用柯里化，你可以提前返回一个函数的执行结果，减少不必要的计算和资源消耗。</li></ol></li><li><p>实现</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">curryFn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> fn<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>newArgs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">curryFn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token operator">...</span>newArgs<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式"><span>⭐ 设计模式</span></a></h2><h3 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式"><span>单例模式</span></a></h3><ul><li><p>定义：确保某个类只有一个实例，并提供一个全局访问点。</p></li><li><p>优点</p><ol><li>唯一实例：单例模式确保一个类只有一个实例，避免重复创建资源</li><li>共享资源：由于只存在一个实例，所以它可以方便的共享数据，使得数据的访问和操作更为集中和一致</li></ol></li><li><p>缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p></li><li><p>场景：需要频繁的创建和销毁实例，比如管理首页页面缓存。</p></li><li><p>实现：使用一个变量来标志当前是否已经为某个类创建过对象，如果是，则在下一次获取该类的实例时，直接返回之前创建的对象。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Singleton<span class="token punctuation">.</span>instacne<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Singleton<span class="token punctuation">.</span>instacne <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> Singleton<span class="token punctuation">.</span>instacne<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="观察者模式" tabindex="-1"><a class="header-anchor" href="#观察者模式"><span>观察者模式</span></a></h3><ul><li><p>定义：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p></li><li><p>优点：观察者和主题之间是抽象耦合的，可以独立的扩展或修改它们。</p></li><li><p>缺点：在观察者模式中，抽象类和具体类之间、观察者和主题之间都存在依赖关系，这会增加代码的复杂度，同时也降低了代码的可读性。</p></li><li><p>场景：关联行为场景，如 A 对象的状态改变需要 B 对象相应改变。</p></li><li><p>实现：定义一个主题（Subject）和多个观察者（Observer），主题（Subject）维持一个观察者（Observer）的集合，当主题（Subject）的状态发生改变时，通知所有观察者（Observer）做出相应的反应，这样就实现了观察者模式。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>obervers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">obs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>obervers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>obs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token parameter">obs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>obervers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>obervers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item <span class="token operator">!==</span> obs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">nofity</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>obervers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">obs</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      obs<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">收到的数据：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> sub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obs1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span><span class="token string">&#39;obs1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obs2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span><span class="token string">&#39;obs2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>obs1<span class="token punctuation">)</span><span class="token punctuation">;</span>
sub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>obs2<span class="token punctuation">)</span><span class="token punctuation">;</span>
sub<span class="token punctuation">.</span><span class="token function">nofity</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sub<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span>obs1<span class="token punctuation">)</span><span class="token punctuation">;</span>
sub<span class="token punctuation">.</span><span class="token function">nofity</span><span class="token punctuation">(</span><span class="token string">&#39;JS&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="发布订阅模式" tabindex="-1"><a class="header-anchor" href="#发布订阅模式"><span>发布订阅模式</span></a></h3><ul><li><p>定义：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p></li><li><p>优点：发布订阅模式比观察者模式多了一个调度中心，从而支持了中间状态的传递。</p></li><li><p>缺点：在实现上要复杂一些，并且需要引入一个调度中心。</p></li><li><p>场景：需要发送通知的场景，如消息推送、广告推送等。</p></li><li><p>实现：定义一个调度中心（Event Channel），订阅者（Subscriber）可以向调度中心订阅事件（Subject），发布者（Publisher）可以向调度中心发布事件（Subject），订阅者和发布者都不需要知道对方的存在。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">PubSub</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 订阅</span>
  <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">topic<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">[</span>topic<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">[</span>topic<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">[</span>topic<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 取消订阅</span>
  <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token parameter">topic<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">[</span>topic<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">[</span>topic<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">[</span>topic<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item <span class="token operator">!==</span> callback
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 发布</span>
  <span class="token function">publish</span><span class="token punctuation">(</span><span class="token parameter">topic<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">[</span>topic<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">[</span>topic<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">cb</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> pubSub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PubSub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> subscribe <span class="token operator">=</span> pubSub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&#39;news&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">收到的信息：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
pubSub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">&#39;news&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pubSub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">&#39;news&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="web-worker-的使用" tabindex="-1"><a class="header-anchor" href="#web-worker-的使用"><span>⭐ Web Worker 的使用</span></a></h2><ul><li>定义：Web Worker 是 HTML5 中的一个新功能，它允许在后台线程中运行 JavaScript 脚本，而不会影响页面的性能，Web Worker 可以将数据传递给其他线程，也可以将其他线程传递过来的数据传递给主线程。</li><li>使用： <ol><li>创建一个新的 Worker 对象，并传入要执行的脚本的 URL。</li><li>调用 Worker 对象的 postMessage 方法，将数据传递给 Worker。</li><li>监听 Worker 对象上的 message 事件，获取从 Worker 返回的数据。</li></ol></li><li>优点：可以实现多线程，提高性能。</li><li>缺点：无法访问 DOM，无法直接操作 DOM 元素，也不能操作某些浏览器的内置对象，例如Window、Document等。</li><li>场景：需要处理大量数据或耗时的操作，可以提高页面性能。</li><li>数据特点： <ol><li>Web Worker传递的数据是经过序列化的</li><li>传递给 Worker 的数据是复制而不是共享的。这意味着数据在传递过程中会被复制，主线程和 Worker 之间的数据不是共享状态</li><li>由于数据是复制的，传递大量数据可能会导致性能问题。对于大数据量的场景，考虑使用 Transferable 对象（如 ArrayBuffer），这种方式允许数据被转移而不是复制，但转移后原来的上下文将无法再使用该数据</li></ol></li></ul>`,58),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","1-js.html.vue"]]),d=JSON.parse('{"path":"/interview/details/1-js.html","title":"Javascript","lang":"zh-CN","frontmatter":{"category":"Javascript","description":"Javascript 数据类型 ES6 有哪些新属性 let 和 const Promise for...of 展开语法和对象数组解构 箭头函数 函数传默认参数 Map，Set，WeakMap，WeakSet 类 模板字符串 Proxy let、var、const 的区别 let 不能重复定义变量，而 var 可以 var 存在变量提升，可在声明前使用...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/my-docs/interview/details/1-js.html"}],["meta",{"property":"og:site_name","content":"HC的前端手册"}],["meta",{"property":"og:title","content":"Javascript"}],["meta",{"property":"og:description","content":"Javascript 数据类型 ES6 有哪些新属性 let 和 const Promise for...of 展开语法和对象数组解构 箭头函数 函数传默认参数 Map，Set，WeakMap，WeakSet 类 模板字符串 Proxy let、var、const 的区别 let 不能重复定义变量，而 var 可以 var 存在变量提升，可在声明前使用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-18T10:45:41.000Z"}],["meta",{"property":"article:author","content":"Mr.HC"}],["meta",{"property":"article:modified_time","content":"2024-02-18T10:45:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Javascript\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-18T10:45:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.HC\\"}]}"]]},"headers":[{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[]},{"level":2,"title":"ES6 有哪些新属性","slug":"es6-有哪些新属性","link":"#es6-有哪些新属性","children":[]},{"level":2,"title":"let、var、const 的区别","slug":"let、var、const-的区别","link":"#let、var、const-的区别","children":[]},{"level":2,"title":"Map 与 Object 的区别","slug":"map-与-object-的区别","link":"#map-与-object-的区别","children":[]},{"level":2,"title":"Map 和 Set 的区别","slug":"map-和-set-的区别","link":"#map-和-set-的区别","children":[]},{"level":2,"title":"Map 和 WeakMap，WeakMap 和 WeakSet","slug":"map-和-weakmap-weakmap-和-weakset","link":"#map-和-weakmap-weakmap-和-weakset","children":[]},{"level":2,"title":"WeakMap 的应用场景","slug":"weakmap-的应用场景","link":"#weakmap-的应用场景","children":[]},{"level":2,"title":"ES6 中的 Proxy","slug":"es6-中的-proxy","link":"#es6-中的-proxy","children":[]},{"level":2,"title":"⭐ 浏览器事件循环(Event Loop)","slug":"浏览器事件循环-event-loop","link":"#浏览器事件循环-event-loop","children":[]},{"level":2,"title":"⭐ 深浅拷贝","slug":"深浅拷贝","link":"#深浅拷贝","children":[]},{"level":2,"title":"⭐ 防抖和节流","slug":"防抖和节流","link":"#防抖和节流","children":[{"level":3,"title":"防抖","slug":"防抖","link":"#防抖","children":[]},{"level":3,"title":"节流","slug":"节流","link":"#节流","children":[]}]},{"level":2,"title":"⭐ 原型和原型链","slug":"原型和原型链","link":"#原型和原型链","children":[]},{"level":2,"title":"⭐ 闭包","slug":"闭包","link":"#闭包","children":[]},{"level":2,"title":"for in 和 for of 的区别","slug":"for-in-和-for-of-的区别","link":"#for-in-和-for-of-的区别","children":[]},{"level":2,"title":"⭐ 箭头函数和普通函数的区别","slug":"箭头函数和普通函数的区别","link":"#箭头函数和普通函数的区别","children":[]},{"level":2,"title":"⭐ new 的执行过程及实现","slug":"new-的执行过程及实现","link":"#new-的执行过程及实现","children":[]},{"level":2,"title":"⭐ ES6 中的 Promise","slug":"es6-中的-promise","link":"#es6-中的-promise","children":[]},{"level":2,"title":"⭐ async/await","slug":"async-await","link":"#async-await","children":[]},{"level":2,"title":"⭐ 函数柯里化","slug":"函数柯里化","link":"#函数柯里化","children":[]},{"level":2,"title":"⭐ 设计模式","slug":"设计模式","link":"#设计模式","children":[{"level":3,"title":"单例模式","slug":"单例模式","link":"#单例模式","children":[]},{"level":3,"title":"观察者模式","slug":"观察者模式","link":"#观察者模式","children":[]},{"level":3,"title":"发布订阅模式","slug":"发布订阅模式","link":"#发布订阅模式","children":[]}]},{"level":2,"title":"⭐ Web Worker 的使用","slug":"web-worker-的使用","link":"#web-worker-的使用","children":[]}],"git":{"createdTime":1708253141000,"updatedTime":1708253141000,"contributors":[{"name":"LuoHuacheng","email":"154224099@qq.com","commits":1}]},"readingTime":{"minutes":18.42,"words":5527},"filePathRelative":"interview/details/1-js.md","localizedDate":"2024年2月18日","autoDesc":true}');export{k as comp,d as data};
