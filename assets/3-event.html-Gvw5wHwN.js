import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e as t}from"./app-D0SJy2ik.js";const e={},p=t(`<h1 id="dom-事件" tabindex="-1"><a class="header-anchor" href="#dom-事件"><span>DOM 事件</span></a></h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>什么是 DOM 事件/流？事件委托(代理)是什么？分哪些级别？有什么方法和属性？</p></div><h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h2><p>DOM 是 JavaScript 操作网页的接口，全称为“文档对象模型”（Document Object Model）。事件的本质是程序各个组成部分之间的一种通信方式，也是异步编程的一种实现。DOM 支持大量的事件。</p><h2 id="dom-事件流" tabindex="-1"><a class="header-anchor" href="#dom-事件流"><span>DOM 事件流</span></a></h2><p>当触发页面中某个元素的某一事件时，JS 引擎会从 window 对象依次向下层节点进行事件的捕获直到捕获到触发事件的目标节点，然后再从目标节点依次向上进行冒泡</p><h3 id="现代浏览器" tabindex="-1"><a class="header-anchor" href="#现代浏览器"><span>现代浏览器</span></a></h3><p>流程：捕获 =&gt; 目标节点 =&gt; 冒泡</p><p>监听：<code>element.add/removeEventListener(event, func, isExexInCapture)</code></p><h3 id="ie8-及更早-ie-版本" tabindex="-1"><a class="header-anchor" href="#ie8-及更早-ie-版本"><span>IE8 及更早 IE 版本</span></a></h3><p>流程：捕获 =&gt; 冒泡</p><p>监听：<code>element.attach/detachEvent(event, func)</code></p><h3 id="this-的指向" tabindex="-1"><a class="header-anchor" href="#this-的指向"><span>this 的指向</span></a></h3><p><mark>监听函数内部的 this 指向触发事件的那个元素节点</mark></p><h3 id="事件委托-代理" tabindex="-1"><a class="header-anchor" href="#事件委托-代理"><span>事件委托(代理)</span></a></h3><p>由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件，即事件的代理（delegation）</p><p>经典使用场景：</p><p>当需要为一个列表中的每个子项添加监听事件时，可以给其父元素添加事件监听函数，并判断该事件的触发元素是否为子项然后再执行函数，此时对动态增加的子项也可生效。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ul<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// some code</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dom-事件级别" tabindex="-1"><a class="header-anchor" href="#dom-事件级别"><span>DOM 事件级别</span></a></h2><p>DOM 事件一般分为 3 个等级，依次为 DOM0 ，DOM2 及 DOM3 三个等级。</p><h3 id="dom0-级别" tabindex="-1"><a class="header-anchor" href="#dom0-级别"><span>DOM0 级别</span></a></h3><p>将一个函数赋值给一个事件处理属性，可以通过给事件处理属性赋值为 <code>null</code> 来解绑事件</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>缺点：<em>无法同时在一个处理程序上绑定多个处理函数</em></p><h3 id="dom2-级别" tabindex="-1"><a class="header-anchor" href="#dom2-级别"><span>DOM2 级别</span></a></h3><p>定义了 <code>add/removeEventListener</code> 两个方法用来绑定和解绑事件，并且还添加了是否在捕获阶段执行处理函数的参数</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// hello</span>
  <span class="token comment">// world</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dom3-级别" tabindex="-1"><a class="header-anchor" href="#dom3-级别"><span>DOM3 级别</span></a></h3><p>DOM3 事件并未做太多改变，只是在 DOM2 事件上添加了更多支持的类型。</p><ol><li>UI 事件，当用户与页面上的元素交互时触发，如：load、scroll</li><li>焦点事件，当元素获得或失去焦点时触发，如：blur、focus</li><li>鼠标事件，当用户通过鼠标在页面执行操作时触发如：dbclick、mouseup</li><li>滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel</li><li>文本事件，当在文档中输入文本时触发，如：textInput</li><li>键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress</li><li>合成事件，当为 IME（输入法编辑器）输入字符时触发，如：compositionstart</li><li>变动事件，当底层 DOM 结构发生变化时触发，如：DOMsubtreeModified</li><li>同时 DOM3 级事件也允许使用者自定义一些事件</li></ol><h2 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法"><span>常用方法</span></a></h2><ol><li><code>event.preventDefault()</code> 阻止浏览器对当前事件的默认行为</li><li><code>event.stopPropagation()</code> 阻止事件在 DOM 中继续传播</li><li><code>event.stopImmediatePropagation()</code> 阻止同一事件的其他监听函数被调用，不管监听函数定义在哪个节点，如果同一个节点对于同一个事件指定了多个监听函数，这些函数会根据添加的顺序依次调用。只要其中有一个监听函数调用了 <code>Event.stopImmediatePropagation</code> 方法，其他的监听函数就不会再执行</li><li><code>event.composedPath()</code> 返回一个数组，其包含事件的最底层节点和依次冒泡经过的所有上层节点</li><li><code>CustomEvent()</code>通过 <code>new CustomEvent(type, options)</code> 生成自定义事件，通过 <code>element.dispatchEvent(event)</code> 触发函数</li></ol><h2 id="常用属性" tabindex="-1"><a class="header-anchor" href="#常用属性"><span>常用属性</span></a></h2><ol><li><code>event.bubbles</code> 返回一个只读的布尔值表示当前事件是否会冒泡，除非显式声明，否则用构造函数自定义的事件默认不冒泡</li><li><code>event.eventPhase</code> 返回只读的整数常量表示目前所处阶段，此属性可能会返回 4 个值 <ul><li>0，事件目前还未发生</li><li>1，事件处于捕获阶段</li><li>2，事件到达目标节点</li><li>3，事件处于冒泡阶段</li></ul></li><li><code>event.cancelable</code> 返回只读的布尔值表示是否可以取消 <ul><li>大多数浏览器原生事件都可以取消，除非显式声明，构造函数生成的事件不可取消</li><li>当 <code>cancelable</code> 为 <code>ture</code> 时，调用 <code>preventDefault()</code> 可以取消，如果为 <code>false</code>，则 <code>preventDefault()</code> 不起作用</li></ul></li><li><code>event.cancelBubble</code> 表示是否阻止事件冒泡的布尔值，若设为 <code>true</code>，则与 <code>event.stopPropagation()</code> 作用相同</li><li><code>event.defaultPrevented</code> 表示事件是否调用过 <code>event.preventDefault()</code> 方法的只读布尔值</li><li><code>event.target</code> 返回原始触发事件的节点，即事件最初发生的那个节点</li><li><code>event.targetTarget</code> 返回事件的当前节点，即正在执行的监听函数所绑定的那个节点</li></ol>`,35),o=[p];function c(l,i){return a(),s("div",null,o)}const r=n(e,[["render",c],["__file","3-event.html.vue"]]),k=JSON.parse('{"path":"/interview/outline/3-event.html","title":"DOM 事件","lang":"zh-CN","frontmatter":{"category":"DOM","description":"DOM 事件 提示 什么是 DOM 事件/流？事件委托(代理)是什么？分哪些级别？有什么方法和属性？ 定义 DOM 是 JavaScript 操作网页的接口，全称为“文档对象模型”（Document Object Model）。事件的本质是程序各个组成部分之间的一种通信方式，也是异步编程的一种实现。DOM 支持大量的事件。 DOM 事件流 当触发页面中...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/my-docs/interview/outline/3-event.html"}],["meta",{"property":"og:site_name","content":"HC的前端手册"}],["meta",{"property":"og:title","content":"DOM 事件"}],["meta",{"property":"og:description","content":"DOM 事件 提示 什么是 DOM 事件/流？事件委托(代理)是什么？分哪些级别？有什么方法和属性？ 定义 DOM 是 JavaScript 操作网页的接口，全称为“文档对象模型”（Document Object Model）。事件的本质是程序各个组成部分之间的一种通信方式，也是异步编程的一种实现。DOM 支持大量的事件。 DOM 事件流 当触发页面中..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-18T10:45:41.000Z"}],["meta",{"property":"article:author","content":"Mr.HC"}],["meta",{"property":"article:modified_time","content":"2024-02-18T10:45:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DOM 事件\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-18T10:45:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.HC\\"}]}"]]},"headers":[{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"DOM 事件流","slug":"dom-事件流","link":"#dom-事件流","children":[{"level":3,"title":"现代浏览器","slug":"现代浏览器","link":"#现代浏览器","children":[]},{"level":3,"title":"IE8 及更早 IE 版本","slug":"ie8-及更早-ie-版本","link":"#ie8-及更早-ie-版本","children":[]},{"level":3,"title":"this 的指向","slug":"this-的指向","link":"#this-的指向","children":[]},{"level":3,"title":"事件委托(代理)","slug":"事件委托-代理","link":"#事件委托-代理","children":[]}]},{"level":2,"title":"DOM 事件级别","slug":"dom-事件级别","link":"#dom-事件级别","children":[{"level":3,"title":"DOM0 级别","slug":"dom0-级别","link":"#dom0-级别","children":[]},{"level":3,"title":"DOM2 级别","slug":"dom2-级别","link":"#dom2-级别","children":[]},{"level":3,"title":"DOM3 级别","slug":"dom3-级别","link":"#dom3-级别","children":[]}]},{"level":2,"title":"常用方法","slug":"常用方法","link":"#常用方法","children":[]},{"level":2,"title":"常用属性","slug":"常用属性","link":"#常用属性","children":[]}],"git":{"createdTime":1708253141000,"updatedTime":1708253141000,"contributors":[{"name":"LuoHuacheng","email":"154224099@qq.com","commits":1}]},"readingTime":{"minutes":4.35,"words":1305},"filePathRelative":"interview/outline/3-event.md","localizedDate":"2024年2月18日","autoDesc":true}');export{r as comp,k as data};
