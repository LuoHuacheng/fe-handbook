import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e}from"./app-CgZv1aOY.js";const t="/fe-handbook/assets/image/basic/prototype_1.png",o="/fe-handbook/assets/image/basic/prototype_2.png",p={},c=e(`<h1 id="原型-链" tabindex="-1"><a class="header-anchor" href="#原型-链"><span>原型/链</span></a></h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>什么是原型/链？如何生成？原型、构造函数、实例、原型链的关系？instanceof/new 原理？</p></div><h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h2><p>JavaScript 规定，所有对象都有自己的原型对象（prototype），一方面，任何一个对象，都可以充当其他对象的原型；另一方面，由于原型对象也是对象，所以它也有自己的原型，如此层层上溯，所有对象的原型都可以上溯到 <code>Object.prototype</code>，其本身的原型为 <code>null</code>，也是原型链的尽头</p><h2 id="创建原型对象" tabindex="-1"><a class="header-anchor" href="#创建原型对象"><span>创建原型对象</span></a></h2><ul><li><p>字面量</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>构造函数</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">M</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">M</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>保留原构造函数属性</li><li>原型链在原构造函数的 <code>prototype</code> 属性</li><li>作用对象为 <code>function</code></li></ul></li><li><p><code>Object.create()</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token constant">P</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> d <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token constant">P</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>丢失原构造函数属性</li><li>原型链为原构造函数/(对象)本身</li><li>作用对象为 <code>function</code> 和 <code>object</code></li></ul></li></ul><h2 id="原型、构造函数、实例、原型链" tabindex="-1"><a class="header-anchor" href="#原型、构造函数、实例、原型链"><span>原型、构造函数、实例、原型链</span></a></h2><ul><li>原型链的顶端是 <code>Object.prototype</code></li><li>实例的原型对象是上一层对象（父对象）的实例</li><li>每个函数都有 <code>prototype</code> 属性，函数在声明的时候 JS 引擎会初始化一个空对象给 <code>prototype</code>（原型对象）</li><li>原型对象中有 <code>contructor</code> 属性，默认指向引用其自身的函数（构造函数）</li></ul><figure><img src="`+t+'" alt="prototype_1" tabindex="0" loading="lazy"><figcaption>原型、构造函数、实例、原型链的关系</figcaption></figure><h2 id="instanceof-原理" tabindex="-1"><a class="header-anchor" href="#instanceof-原理"><span>instanceof 原理</span></a></h2><ul><li>实例对象的 <code>__proto__</code> 指向其构造函数的原型对象</li><li><code>instanceOf</code> 的原理是判断实例对象的 <code>__proto__</code> 和构造函数的 <code>prototype</code> 是不是统一引用</li><li>同一条原型链上使用 <code>instanceOf</code> 判断都会返回 true，此时可以使用 <code>__proto__.constructor</code> 判定</li></ul><figure><img src="'+o+`" alt="prototype_2" tabindex="0" loading="lazy"><figcaption>instanceof 原理</figcaption></figure><h2 id="new-运算符" tabindex="-1"><a class="header-anchor" href="#new-运算符"><span>new 运算符</span></a></h2><p>执行顺序:</p><ol><li>创建一个空对象，作为将要返回的对象实例</li><li>将这个空对象的原型，指向构造函数的 <code>prototype</code> 属性</li><li>传入相应参数，并将这个空对象赋值给函数内部的 <code>this</code> 关键字</li><li>若构造函数返回一个“对象”则该“对象”会取代整个 <code>new</code> 的结果，若不返回，则 <code>new</code> 的结果为步骤 1 创建的对象</li></ol><p>模拟实现:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 将 arguments 对象转为数组</span>
  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 取出构造函数</span>
  <span class="token keyword">const</span> constructor <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> constructor <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token string">&#39;constructor param must be a function&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 创建一个空对象，继承构造函数的 prototype 属性</span>
  <span class="token keyword">const</span> context <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 执行构造函数</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">constructor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 如果返回结果是对象，就直接返回，否则返回 context 对象</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> result <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> result <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> result <span class="token operator">:</span> context<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),i=[c];function l(r,u){return a(),s("div",null,i)}const m=n(p,[["render",l],["__file","5-prototype.html.vue"]]),v=JSON.parse(`{"path":"/interview/outline/5-prototype.html","title":"原型/链","lang":"zh-CN","frontmatter":{"category":"Javascript","description":"原型/链 提示 什么是原型/链？如何生成？原型、构造函数、实例、原型链的关系？instanceof/new 原理？ 定义 JavaScript 规定，所有对象都有自己的原型对象（prototype），一方面，任何一个对象，都可以充当其他对象的原型；另一方面，由于原型对象也是对象，所以它也有自己的原型，如此层层上溯，所有对象的原型都可以上溯到 Objec...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/fe-handbook/interview/outline/5-prototype.html"}],["meta",{"property":"og:site_name","content":"HC的前端手册"}],["meta",{"property":"og:title","content":"原型/链"}],["meta",{"property":"og:description","content":"原型/链 提示 什么是原型/链？如何生成？原型、构造函数、实例、原型链的关系？instanceof/new 原理？ 定义 JavaScript 规定，所有对象都有自己的原型对象（prototype），一方面，任何一个对象，都可以充当其他对象的原型；另一方面，由于原型对象也是对象，所以它也有自己的原型，如此层层上溯，所有对象的原型都可以上溯到 Objec..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vuepress-theme-hope-docs-demo.netlify.app/fe-handbook/assets/image/basic/prototype_1.png '原型、构造函数、实例、原型链的关系'"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-18T10:45:41.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"原型/链"}],["meta",{"property":"article:author","content":"Mr.HC"}],["meta",{"property":"article:modified_time","content":"2024-02-18T10:45:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"原型/链\\",\\"image\\":[\\"https://vuepress-theme-hope-docs-demo.netlify.app/fe-handbook/assets/image/basic/prototype_1.png '原型、构造函数、实例、原型链的关系'\\",\\"https://vuepress-theme-hope-docs-demo.netlify.app/fe-handbook/assets/image/basic/prototype_2.png 'instanceof 原理'\\"],\\"dateModified\\":\\"2024-02-18T10:45:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.HC\\"}]}"]]},"headers":[{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"创建原型对象","slug":"创建原型对象","link":"#创建原型对象","children":[]},{"level":2,"title":"原型、构造函数、实例、原型链","slug":"原型、构造函数、实例、原型链","link":"#原型、构造函数、实例、原型链","children":[]},{"level":2,"title":"instanceof 原理","slug":"instanceof-原理","link":"#instanceof-原理","children":[]},{"level":2,"title":"new 运算符","slug":"new-运算符","link":"#new-运算符","children":[]}],"git":{"createdTime":1708253141000,"updatedTime":1708253141000,"contributors":[{"name":"LuoHuacheng","email":"154224099@qq.com","commits":1}]},"readingTime":{"minutes":2.15,"words":644},"filePathRelative":"interview/outline/5-prototype.md","localizedDate":"2024年2月18日","autoDesc":true}`);export{m as comp,v as data};
