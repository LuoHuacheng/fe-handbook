import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app--uKMlBPf.js";const e={},i=t(`<h1 id="this的指向" tabindex="-1"><a class="header-anchor" href="#this的指向"><span>this的指向</span></a></h1><h2 id="调用位置的判定" tabindex="-1"><a class="header-anchor" href="#调用位置的判定"><span>调用位置的判定</span></a></h2><ul><li>分析调用栈，调用位置就是当前正在执行的函数的前一个调用中</li><li>使用开发者工具得到，设置断点或插入 debugger 会同时展示当前位置的函数列表（调用栈），栈中的第二个元素即是真正的调用位置</li></ul><h2 id="绑定规则" tabindex="-1"><a class="header-anchor" href="#绑定规则"><span>绑定规则</span></a></h2><ul><li>默认绑定 <ul><li>独立函数调用，可看作是无法应用其他规则时的默认规则，指向全局对象</li><li>严格模式下，不能将全局对象用于默认绑定，会绑定到 undefined；</li><li>非严格模式下默认绑定才能绑定到全局对象；</li><li>严格模式下调用函数则不影响默认绑定</li></ul></li><li>隐式绑定 <ul><li>当函数引用有上下文对象时，此规则会把函数中的this绑定到该上下文对象中</li><li>特定情况会丢失绑定对象，此时应用默认绑定规则，绑定到全局对象或者 undefined 上</li><li>参数传递即常用的隐式绑定，传入函数时会被隐式绑定，因此回调函数丢失 this 是常见现象</li></ul></li><li>显式绑定 <ul><li>使用 call、apply、bind 方法，可以强制绑定 this 指向</li><li>硬绑定 <ul><li>可以将 this 强制绑定到除 new 以外的指定对象，但是会降低函数灵活性，硬绑定后无法再使用隐式绑定或显式绑定修改 this</li><li>使用 ES5 的 Function.prototype.bind，返回一个硬绑定的新函数</li><li>使用 apply 创建一个包裹函数，接收要绑定的对象并返回值</li><li>在函数内部手动调用 fn.call(obj)，强制将 fn 的 this 绑定到 obj 上</li></ul></li><li>API调用的上下文 <ul><li>许多内置函数提供了一个可选的上下文（context）参数，其作用与 bind 相同，确保回调函数使用指定的 this；这些函数实际上是通过 call 或 apply 实现了显式绑定</li></ul></li></ul></li><li>new 绑定 <ul><li>构造函数（构造函数调用），使用 new 操作符时被调用的普通函数</li><li>顺序 <ol><li>创建（构造）一个新对象</li><li>新对象会被执行 Prototype 连接</li><li>新对象会绑定函数调用的 this</li><li>如果函数没有返回其它对象，那么 new 表达式中的函数调用会自动返回这个新对象 var bar = new foo(2); 会将 bar 绑定到 foo 的 this 上</li></ol></li></ul></li></ul><h2 id="绑定优先级" tabindex="-1"><a class="header-anchor" href="#绑定优先级"><span>绑定优先级</span></a></h2><ul><li>new 绑定 &gt; 显式绑定 &gt; 隐式绑定 &gt; 默认绑定</li><li>绑定规则的优先级由高到低排列，高优先级的规则会覆盖低优先级的规则</li></ul><h2 id="绑定例外" tabindex="-1"><a class="header-anchor" href="#绑定例外"><span>绑定例外</span></a></h2><ul><li><p>被忽略的this</p><ul><li>将 null 或 undefined 作为 this 的绑定对象传入 call , apply 或 bind 时会被忽略并应用默认规则</li><li>使用 apply 展开一个数组并作为参数传入一个函数</li><li>使用 bind 对参数进行柯里化（预先设置一些参数）</li><li>传入 null 可能会产生副作用，可能会对某个确实使用了 this 的函数应用默认规则更安全的做法是传入一个特殊的对象（空对象）Object.create(null)不会创建 Object.prototype这个委托，比 {} 更好</li></ul></li><li><p>间接引用</p><ul><li>赋值时容易发生间接引用，此时调用函数会应用默认规则</li></ul></li><li><p>软绑定</p><ul><li>给默认绑定指定一个全局对象和 undefined 以外的值以实现硬绑定相同的效果并且保留了隐式或显式修改 this 的能力</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 默认绑定规则，优先级排最后</span>
<span class="token comment">// 如果this绑定到全局对象或者undefined</span>
<span class="token comment">// 那就把指定的默认对象obj绑定到this</span>
<span class="token comment">// 否则不会修改this</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>softBind<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">softBind</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token comment">// 捕获所有curried参数</span>
  <span class="token keyword">var</span> curried <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> <span class="token function-variable function">bound</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span> <span class="token operator">||</span> <span class="token keyword">this</span> <span class="token operator">===</span> <span class="token punctuation">(</span>window <span class="token operator">||</span> global<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> obj <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>
        curried<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>curried<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  bound<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> bound<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="this-词法" tabindex="-1"><a class="header-anchor" href="#this-词法"><span>this 词法</span></a></h2><ul><li>ES6 的箭头函数无法使用上述的绑定规则，而是根据外层函数或全局作用域（词法作用域）来决定 this</li><li>ES6 之前采用赋值（var self = this）来使用 this 词法作用域</li></ul>`,11),l=[i];function p(o,c){return s(),a("div",null,l)}const d=n(e,[["render",p],["__file","4-this.html.vue"]]),k=JSON.parse('{"path":"/js-book/4-this.html","title":"this的指向","lang":"zh-CN","frontmatter":{"category":"JS","description":"this的指向 调用位置的判定 分析调用栈，调用位置就是当前正在执行的函数的前一个调用中 使用开发者工具得到，设置断点或插入 debugger 会同时展示当前位置的函数列表（调用栈），栈中的第二个元素即是真正的调用位置 绑定规则 默认绑定 独立函数调用，可看作是无法应用其他规则时的默认规则，指向全局对象 严格模式下，不能将全局对象用于默认绑定，会绑定到...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/my-docs/js-book/4-this.html"}],["meta",{"property":"og:site_name","content":"HC的前端手册"}],["meta",{"property":"og:title","content":"this的指向"}],["meta",{"property":"og:description","content":"this的指向 调用位置的判定 分析调用栈，调用位置就是当前正在执行的函数的前一个调用中 使用开发者工具得到，设置断点或插入 debugger 会同时展示当前位置的函数列表（调用栈），栈中的第二个元素即是真正的调用位置 绑定规则 默认绑定 独立函数调用，可看作是无法应用其他规则时的默认规则，指向全局对象 严格模式下，不能将全局对象用于默认绑定，会绑定到..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-18T10:45:41.000Z"}],["meta",{"property":"article:author","content":"Mr.HC"}],["meta",{"property":"article:modified_time","content":"2024-02-18T10:45:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"this的指向\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-18T10:45:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.HC\\"}]}"]]},"headers":[{"level":2,"title":"调用位置的判定","slug":"调用位置的判定","link":"#调用位置的判定","children":[]},{"level":2,"title":"绑定规则","slug":"绑定规则","link":"#绑定规则","children":[]},{"level":2,"title":"绑定优先级","slug":"绑定优先级","link":"#绑定优先级","children":[]},{"level":2,"title":"绑定例外","slug":"绑定例外","link":"#绑定例外","children":[]},{"level":2,"title":"this 词法","slug":"this-词法","link":"#this-词法","children":[]}],"git":{"createdTime":1708253141000,"updatedTime":1708253141000,"contributors":[{"name":"LuoHuacheng","email":"154224099@qq.com","commits":1}]},"readingTime":{"minutes":3.44,"words":1031},"filePathRelative":"js-book/4-this.md","localizedDate":"2024年2月18日","autoDesc":true}');export{d as comp,k as data};
